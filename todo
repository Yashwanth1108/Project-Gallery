SQL ->
CREATE TABLE Project (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  image_link VARCHAR(255),
  published BOOLEAN NOT NULL
);

CREATE TABLE admins (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);

CREATE TABLE user_purchased_Project (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  Project_id INT REFERENCES Project(id)
);


--get Purchase Course (User):
app.post('/users/courses/:courseId', authenticateJwt, async (req, res) => {

});
-- Get Purchase Course Details for User 1 and Purchase ID 1
SELECT Project.id, Project.title, Project.description, Project.price
FROM Project
JOIN user_purchased_Project ON Project.id = user_purchased_Project.Project_id
WHERE user_purchased_Project.user_id = 1
AND user_purchased_Project.id = 1;


--SQL equivalent (to add a purchased course for the user):
INSERT INTO user_purchased_courses (user_id, course_id)
VALUES (userId, courseId);

--Get Purchased Courses (User):
-- Get Purchased Courses for a specific user (replace user_id_value with the user's ID)
SELECT Project.id, Project.title, Project.description, Project.price
FROM Project
JOIN user_purchased_Project ON Project.id = user_purchased_Project.Project_id
WHERE user_purchased_Project.user_id = user_id_value;


--Get Purchased Courses (User):
-- Get Purchased Courses for a specific user (replace user_id_value with the user's ID)
SELECT Project.id, Project.title, Project.description, Project.price
FROM Project prjt
JOIN user_purchased_Project upp ON prjt.id = upp.Project_id
WHERE upp.user_id = user_id;

